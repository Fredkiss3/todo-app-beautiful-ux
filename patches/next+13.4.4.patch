diff --git a/node_modules/next/dist/client/components/router-reducer/get-prefetch-cache-entry-status.js b/node_modules/next/dist/client/components/router-reducer/get-prefetch-cache-entry-status.js
index b611280..009dcc2 100644
--- a/node_modules/next/dist/client/components/router-reducer/get-prefetch-cache-entry-status.js
+++ b/node_modules/next/dist/client/components/router-reducer/get-prefetch-cache-entry-status.js
@@ -21,7 +21,7 @@ _export(exports, {
     }
 });
 const FIVE_MINUTES = 5 * 60 * 1000;
-const THIRTY_SECONDS = 30 * 1000;
+const ONE_SECOND = 1 * 1000;
 var PrefetchCacheEntryStatus;
 (function(PrefetchCacheEntryStatus) {
     PrefetchCacheEntryStatus["fresh"] = "fresh";
@@ -32,7 +32,8 @@ var PrefetchCacheEntryStatus;
 function getPrefetchEntryCacheStatus(param) {
     let { kind , prefetchTime , lastUsedTime  } = param;
     // if the cache entry was prefetched or read less than 30s ago, then we want to re-use it
-    if (Date.now() < (lastUsedTime != null ? lastUsedTime : prefetchTime) + THIRTY_SECONDS) {
+    // FIXME: TEMPORARY PATCH : reduced the time to only 1s
+    if (Date.now() < (lastUsedTime != null ? lastUsedTime : prefetchTime) + ONE_SECOND) {
         return lastUsedTime ? "reusable" : "fresh";
     }
     // if the cache entry was prefetched less than 5 mins ago, then we want to re-use only the loading state
diff --git a/node_modules/next/dist/esm/client/components/router-reducer/get-prefetch-cache-entry-status.js b/node_modules/next/dist/esm/client/components/router-reducer/get-prefetch-cache-entry-status.js
index 7156f75..438e828 100644
--- a/node_modules/next/dist/esm/client/components/router-reducer/get-prefetch-cache-entry-status.js
+++ b/node_modules/next/dist/esm/client/components/router-reducer/get-prefetch-cache-entry-status.js
@@ -1,5 +1,5 @@
 const FIVE_MINUTES = 5 * 60 * 1000;
-const THIRTY_SECONDS = 30 * 1000;
+const ONE_SECOND = 1 * 1000;
 export var PrefetchCacheEntryStatus;
 (function(PrefetchCacheEntryStatus) {
     PrefetchCacheEntryStatus["fresh"] = "fresh";
@@ -10,7 +10,8 @@ export var PrefetchCacheEntryStatus;
 export function getPrefetchEntryCacheStatus(param) {
     let { kind , prefetchTime , lastUsedTime  } = param;
     // if the cache entry was prefetched or read less than 30s ago, then we want to re-use it
-    if (Date.now() < (lastUsedTime != null ? lastUsedTime : prefetchTime) + THIRTY_SECONDS) {
+     // FIXME: TEMPORARY PATCH : reduced the time to only 1s
+    if (Date.now() < (lastUsedTime != null ? lastUsedTime : prefetchTime) + ONE_SECOND) {
         return lastUsedTime ? "reusable" : "fresh";
     }
     // if the cache entry was prefetched less than 5 mins ago, then we want to re-use only the loading state
diff --git a/node_modules/next/dist/client/components/router-reducer/reducers/navigate-reducer.js b/node_modules/next/dist/client/components/router-reducer/reducers/navigate-reducer.js
index bafc1c1..18bd713 100644
--- a/node_modules/next/dist/client/components/router-reducer/reducers/navigate-reducer.js
+++ b/node_modules/next/dist/client/components/router-reducer/reducers/navigate-reducer.js
@@ -203,7 +203,7 @@ function navigateReducer(state, action) {
                 return handleExternalUrl(state, mutable, href, pendingPush);
             }
             let applied = (0, _applyflightdata.applyFlightData)(currentCache, cache, flightDataPath, prefetchValues.kind === "auto" && prefetchEntryCacheStatus === _getprefetchcacheentrystatus.PrefetchCacheEntryStatus.reusable);
-            if (!applied && prefetchEntryCacheStatus === _getprefetchcacheentrystatus.PrefetchCacheEntryStatus.stale) {
+            if (prefetchEntryCacheStatus === _getprefetchcacheentrystatus.PrefetchCacheEntryStatus.stale) {
                 applied = addRefetchToLeafSegments(cache, currentCache, flightSegmentPath, treePatch, // eslint-disable-next-line no-loop-func
                 ()=>(0, _fetchserverresponse.fetchServerResponse)(url, currentTree, state.nextUrl));
             }
diff --git a/node_modules/next/dist/esm/client/components/router-reducer/reducers/navigate-reducer.js b/node_modules/next/dist/esm/client/components/router-reducer/reducers/navigate-reducer.js
index dc29fc2..1d456bc 100644
--- a/node_modules/next/dist/esm/client/components/router-reducer/reducers/navigate-reducer.js
+++ b/node_modules/next/dist/esm/client/components/router-reducer/reducers/navigate-reducer.js
@@ -181,7 +181,7 @@ export function navigateReducer(state, action) {
                 return handleExternalUrl(state, mutable, href, pendingPush);
             }
             let applied = applyFlightData(currentCache, cache, flightDataPath, prefetchValues.kind === "auto" && prefetchEntryCacheStatus === PrefetchCacheEntryStatus.reusable);
-            if (!applied && prefetchEntryCacheStatus === PrefetchCacheEntryStatus.stale) {
+            if (prefetchEntryCacheStatus === PrefetchCacheEntryStatus.stale) {
                 applied = addRefetchToLeafSegments(cache, currentCache, flightSegmentPath, treePatch, // eslint-disable-next-line no-loop-func
                 ()=>fetchServerResponse(url, currentTree, state.nextUrl));
             }